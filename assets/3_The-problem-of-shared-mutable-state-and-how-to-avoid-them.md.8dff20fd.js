import{_ as s,c as a,o as n,O as l}from"./chunks/framework.103df890.js";const C=JSON.parse('{"title":"共享可变状态问题","description":"","frontmatter":{"title":"共享可变状态问题"},"headers":[],"relativePath":"3/The-problem-of-shared-mutable-state-and-how-to-avoid-them.md","lastUpdated":1682474873000}'),p={name:"3/The-problem-of-shared-mutable-state-and-how-to-avoid-them.md"},o=l(`<p>目录：</p><nav class="table-of-contents"><ul><li><a href="#_1️⃣-什么是共享可变状态及为什么这会成为问题">1️⃣ 什么是共享可变状态及为什么这会成为问题?</a></li><li><a href="#_2️⃣-通过拷贝数据避免共享">2️⃣ 通过拷贝数据避免共享</a><ul><li><a href="#_2-1-拷贝是如何帮助解决共享可变状态的">2.1 拷贝是如何帮助解决共享可变状态的？</a></li></ul></li><li><a href="#_3️⃣-通过非破坏性更新避免突变">3️⃣ 通过非破坏性更新避免突变</a><ul><li><a href="#_3-1-非破坏性更新如何对共享可变状态有帮助的">3.1 非破坏性更新如何对共享可变状态有帮助的？</a></li></ul></li><li><a href="#_4️⃣-使数据不可变的方式阻止突变">4️⃣ 使数据不可变的方式阻止突变</a><ul><li><a href="#_4-1-不可变性如何帮助共享可变状态的">4.1 不可变性如何帮助共享可变状态的？</a></li></ul></li><li><a href="#_5️⃣-避免共享可变状态的库">5️⃣ 避免共享可变状态的库</a><ul><li><a href="#_5-1-immutable-js">5.1 Immutable.js</a></li><li><a href="#_5-2-immer">5.2 Immer</a></li></ul></li></ul></nav><p>本章将回答如下3个问题：</p><ol><li>什么是共享可变状态？</li><li>为什么共享可变状态会成为麻烦？</li><li>如何避免这些麻烦？</li></ol><p id="1"></p><h2 id="_1️⃣-什么是共享可变状态及为什么这会成为问题" tabindex="-1">1️⃣ 什么是共享可变状态及为什么这会成为问题? <a class="header-anchor" href="#_1️⃣-什么是共享可变状态及为什么这会成为问题" aria-label="Permalink to &quot;1️⃣ 什么是共享可变状态及为什么这会成为问题?&quot;">​</a></h2><p>共享可变状态效果如下：</p><ul><li>如果2方或更多方（<code>parties</code>）可以改变相同的数据（变量，对象等）</li><li>并且它们的生命周期有重叠</li><li>则会存在某一方的修改会导致其它方不能正常工作</li></ul><p>🚨注意这个定义适用于函数调用，协作式多任务（比如，JS中的异步函数）等。风险都类似。</p><p>下面代码是个例子。这个例子不太现实，仅做演示和便于理解使用：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight has-highlighted-lines"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">logElements</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">arr</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line highlighted"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">arr</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">length</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line highlighted"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">arr</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">shift</span><span style="color:#F07178;">())</span></span>
<span class="line highlighted"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">arr</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> [</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">banana</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">orange</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">apple</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">]</span></span>
<span class="line"><span style="color:#F07178;">  </span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Before sorting</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">logElements</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">arr</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span></span>
<span class="line highlighted"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">arr</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">sort</span><span style="color:#F07178;">() </span><span style="color:#676E95;font-style:italic;">// 改变了arr</span></span>
<span class="line"><span style="color:#F07178;">  </span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">After sorting:</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line highlighted"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">logElements</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">arr</span><span style="color:#F07178;">)  </span><span style="color:#676E95;font-style:italic;">// A</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#82AAFF;">main</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 输出结果</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// &#39;Before sorting:&#39;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// &#39;banana&#39;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// &#39;orange&#39;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// &#39;apple&#39;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// &#39;After sorting:&#39;</span></span></code></pre></div><p>在这种情况下，有两个独立的当事方:</p><ul><li>函数 <code>main()</code> 想要在数组排序前后记录它</li><li>函数 <code>logElements()</code> 记录其参数 <code>arr</code> 中的元素，但是这样做的时候却移除了数组中的元素😅</li></ul><p><code>logElements()</code> 破坏了 <code>main()</code>，并导致 <code>A</code> 行打印了一个空数组。</p><p>在本章后续部分，我们将看3种避免共享可变状态引发的问题的3种方式：</p><ol><li>通过拷贝数据避免共享</li><li>通过非破坏性更新避免突变（<code>mutations</code>）</li><li>使数据不可变（<code>immutable</code>）以便阻止突变</li></ol><p>特别的，我们将稍后回顾上面的例子，并修复它。</p><p id="2"></p><h2 id="_2️⃣-通过拷贝数据避免共享" tabindex="-1">2️⃣ 通过拷贝数据避免共享 <a class="header-anchor" href="#_2️⃣-通过拷贝数据避免共享" aria-label="Permalink to &quot;2️⃣ 通过拷贝数据避免共享&quot;">​</a></h2><p><em>拷贝数据是避免共享的一种方式。</em></p><p>💡对拷贝数据，可以参考本书的下面2章：</p><ul><li><a href="./Copying-objects-and-arrays.html">7.Copying objects and Arrays</a></li><li><a href="./../5/Copying-instances-of-classes-clone-vs-copy-constructors.html">15.Copying instances of classes: .clone() vs. copy constructors</a></li></ul><p id="2.1"></p><h3 id="_2-1-拷贝是如何帮助解决共享可变状态的" tabindex="-1">2.1 拷贝是如何帮助解决共享可变状态的？ <a class="header-anchor" href="#_2-1-拷贝是如何帮助解决共享可变状态的" aria-label="Permalink to &quot;2.1 拷贝是如何帮助解决共享可变状态的？&quot;">​</a></h3><p><strong>只要我们只从共享数据中 读（<code>read</code>）数据，我们什么问题也没有</strong>。在 <em>修改（<code>modifying</code>）</em> 数据前，我们可通过拷贝（必要时需深拷贝）方式 <em>取消共享（<code>un-share</code>）</em> 它。</p><p>🚀🚀 <em>防御性拷贝（<code>Defensive copying</code>）</em> 是一种在可能出现问题时始终进行复制的技术。它的目的是保证当前实体（函数，类，等）的安全：</p><ul><li>输入：拷贝潜在传给我们的共享数据，使得我们可以在不打扰外部数据的前提下，使用该数据</li><li>输出：在暴露给外界前， 我们拷贝内部数据，这意味着外部不能干扰到我们内部的活动</li></ul><p>注意，这些措施保护我们不受其他方面的影响，但它们也保护其他方面不受我们的影响。</p><p>下面阐述这2种防御性拷贝。</p><h4 id="_2-1-1-拷贝共享输入" tabindex="-1">2.1.1 拷贝共享输入 <a class="header-anchor" href="#_2-1-1-拷贝共享输入" aria-label="Permalink to &quot;2.1.1 拷贝共享输入&quot;">​</a></h4><p>还记得在本章开始的例子中，我们遇到了麻烦，因为<code>logElements()</code>修改了它的参数<code>arr</code>:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">logElements</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">arr</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">arr</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">length</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">arr</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">shift</span><span style="color:#F07178;">())</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>😎让我们给这个函数添加防御性拷贝：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight has-highlighted-lines"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">logElements</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">arr</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line highlighted"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">arr</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> [</span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;">arr</span><span style="color:#F07178;">] </span><span style="color:#676E95;font-style:italic;">// 防御性拷贝</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">arr</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">length</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">arr</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">shift</span><span style="color:#F07178;">())</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>现在，我们在 <code>main()</code> 中再调用 <code>logElements()</code> 不会存在任何问题了：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight has-highlighted-lines"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">arr</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> [</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">banana</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">orange</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">apple</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">]</span></span>
<span class="line"><span style="color:#F07178;">  </span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Before sorting</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">logElements</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">arr</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">arr</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">sort</span><span style="color:#F07178;">() </span><span style="color:#676E95;font-style:italic;">// 改变了arr</span></span>
<span class="line"><span style="color:#F07178;">  </span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">After sorting:</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">logElements</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">arr</span><span style="color:#F07178;">)  </span><span style="color:#676E95;font-style:italic;">// A</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#82AAFF;">main</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 打印结果</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// &#39;Before sorting:&#39;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// &#39;banana&#39;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// &#39;orange&#39;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// &#39;apple&#39;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// &#39;After sorting:&#39;</span></span>
<span class="line highlighted"><span style="color:#676E95;font-style:italic;">// &#39;apple&#39;</span></span>
<span class="line highlighted"><span style="color:#676E95;font-style:italic;">// &#39;banana&#39;</span></span>
<span class="line highlighted"><span style="color:#676E95;font-style:italic;">// &#39;orange&#39;</span></span></code></pre></div><h4 id="_2-1-2-对暴露的内部数据进行拷贝" tabindex="-1">2.1.2 对暴露的内部数据进行拷贝 <a class="header-anchor" href="#_2-1-2-对暴露的内部数据进行拷贝" aria-label="Permalink to &quot;2.1.2 对暴露的内部数据进行拷贝&quot;">​</a></h4><p>我们先从类 <code>StringBuilder</code> 开始，它在 <code>A</code> 行没有拷贝暴露给外部的内部数据：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight has-highlighted-lines"><code><span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">StringBuilder</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">_data</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> []</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">add</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">str</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">_data</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">str</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line highlighted"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">getParts</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line highlighted"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 🚨 这里向外部暴露了内部数据</span></span>
<span class="line highlighted"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//    但是没有对其进行拷贝</span></span>
<span class="line highlighted"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">_data</span><span style="color:#F07178;">  </span><span style="color:#676E95;font-style:italic;">// A</span></span>
<span class="line highlighted"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">toString</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">_data</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">join</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>只要不使用 <code>getParts()</code> 方法，一切正常:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> sb1 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">StringBuilderr</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">sb1</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">add</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Hello</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">sb1</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">add</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;"> world!</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">assert</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">equal</span><span style="color:#A6ACCD;">(sb1</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toString</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Hello world!</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span></code></pre></div><p>然而，如果改变了 <code>.getParts()</code> 的返回结果（<code>A</code> 行），会使得 <code>StringBuilder</code> 将变得不正常：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight has-highlighted-lines"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> sb2 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">StringBuilderr</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">sb2</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">add</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Hello</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">sb2</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">add</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;"> world!</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line highlighted"><span style="color:#A6ACCD;">sb2</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getParts</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">length </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// A</span></span>
<span class="line highlighted"><span style="color:#A6ACCD;">assert</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">equal</span><span style="color:#A6ACCD;">(sb2</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toString</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;&#39;</span><span style="color:#A6ACCD;">) </span><span style="color:#676E95;font-style:italic;">// ❌ 不正常</span></span></code></pre></div><p>😎解决办法就是，在暴露内部数据 <code>_data</code> 之前（A行）对其进行防御性拷贝：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight has-highlighted-lines"><code><span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">StringBuilder</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">_data</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> []</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">add</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">str</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">_data</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">str</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">getParts</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line highlighted"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 🚨 防御性拷贝</span></span>
<span class="line highlighted"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> [</span><span style="color:#89DDFF;">...this.</span><span style="color:#A6ACCD;">_data</span><span style="color:#F07178;"> ] </span><span style="color:#676E95;font-style:italic;">// A</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">toString</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">_data</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">join</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>现在再改变 <code>.getParts()</code> 的结果不再会影响到实例的操作：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight has-highlighted-lines"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> sb </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">StringBuilderr</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">sb</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">add</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Hello</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">sb</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">add</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;"> world!</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line highlighted"><span style="color:#A6ACCD;">sb</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getParts</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">length </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// A 不再影响实例sb</span></span>
<span class="line highlighted"><span style="color:#A6ACCD;">assert</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">equal</span><span style="color:#A6ACCD;">(sb</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toString</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Hello world!</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">) </span><span style="color:#676E95;font-style:italic;">// ✅</span></span></code></pre></div><p id="3"></p><h2 id="_3️⃣-通过非破坏性更新避免突变" tabindex="-1">3️⃣ 通过非破坏性更新避免突变 <a class="header-anchor" href="#_3️⃣-通过非破坏性更新避免突变" aria-label="Permalink to &quot;3️⃣ 通过非破坏性更新避免突变&quot;">​</a></h2><p>如果我们非破坏性的更新数据，我们可以避免突变。</p><p>💡关于更新数据，可参考上一章：</p><ul><li><a href="./Updating-data-destructively-and-non-destructively.html">8.Updating data destructively and non-destructively</a></li></ul><p id="3.1"></p><h3 id="_3-1-非破坏性更新如何对共享可变状态有帮助的" tabindex="-1">3.1 非破坏性更新如何对共享可变状态有帮助的？ <a class="header-anchor" href="#_3-1-非破坏性更新如何对共享可变状态有帮助的" aria-label="Permalink to &quot;3.1 非破坏性更新如何对共享可变状态有帮助的？&quot;">​</a></h3><p>通过非破坏性更新，共享可变状态不再是问题，因为我们永远不会改变该共享可变状态。（注意：只有每个访问数据的操作都这样做，才有效）。</p><p>有趣的是，拷贝数据变得十分简单：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> original </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">city</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Berlin</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">country</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Germany</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> copy </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> original</span></span></code></pre></div><p>这是可行的，因为我们只进行非破坏性的更改，因此根据需要复制数据。</p><p id="4"></p><h2 id="_4️⃣-使数据不可变的方式阻止突变" tabindex="-1">4️⃣ 使数据不可变的方式阻止突变 <a class="header-anchor" href="#_4️⃣-使数据不可变的方式阻止突变" aria-label="Permalink to &quot;4️⃣ 使数据不可变的方式阻止突变&quot;">​</a></h2><p><strong>📚我们可以将共享数据变为不可变，以阻止其突变。</strong></p><p>JS中如何使数据不可变，可参考下面2章：</p><ul><li><a href="./../4/Protecting-objects-from-changed.html">11.Protecting objects from being changed</a></li><li><a href="./../5/Immutable-wrappers-for-collections.html">16.Immutable wrappers for collections</a></li></ul><p id="4.1"></p><h3 id="_4-1-不可变性如何帮助共享可变状态的" tabindex="-1">4.1 不可变性如何帮助共享可变状态的？ <a class="header-anchor" href="#_4-1-不可变性如何帮助共享可变状态的" aria-label="Permalink to &quot;4.1 不可变性如何帮助共享可变状态的？&quot;">​</a></h3><p>如果数据不可变，它可以无任何风险共享😎。特别是，没有必要再进行防御性的拷贝了。</p><p>💡 <em>非破坏性更新时对不可变数据的一个重要补充</em>：</p><p>如果我们将2者结合起来，不可变数据将和可变数据一样变得十分有用，并且还没有相关的风险。🤩</p><p id="5"></p><h2 id="_5️⃣-避免共享可变状态的库" tabindex="-1">5️⃣ 避免共享可变状态的库 <a class="header-anchor" href="#_5️⃣-避免共享可变状态的库" aria-label="Permalink to &quot;5️⃣ 避免共享可变状态的库&quot;">​</a></h2><p>JS中有几个支持不可变数据+非破坏性更新的库。最流行的2个是：</p><ol><li><a href="https://github.com/immutable-js/immutable-js" target="_blank" rel="noreferrer">Immutable.js</a> 对lists, stacks, sets, maps等提供不可变数据结构</li><li><a href="https://immerjs.github.io/immer/" target="_blank" rel="noreferrer">Immer.js</a> 也支持不可变数据+非破坏性更新，<em>但只针对普通的对象，数组，Sets，Maps</em>。即不需要新的数据结构</li></ol><p>下面更详细的介绍一下这2个库。</p><p id="5.1"></p><h3 id="_5-1-immutable-js" tabindex="-1">5.1 Immutable.js <a class="header-anchor" href="#_5-1-immutable-js" aria-label="Permalink to &quot;5.1 Immutable.js&quot;">​</a></h3><p><a href="https://github.com/immutable-js/immutable-js" target="_blank" rel="noreferrer">Immutable.js</a> 仓库描述如下：</p><ul><li>JavaScript的不可变持久数据集合提高了效率和简单性。</li></ul><p>Immutable.js提供了如下不可变数据结构：</p><ul><li>Lists</li><li>Stack</li><li>Set (不同于JS内置的Set)</li><li>Map (不同于JS内置的Map)</li><li>等等</li></ul><p>下面我们使用不可变的 <code>Map</code>:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight has-highlighted-lines"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Map</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">immutable/dist/immutable.es.js</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> map0 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Map</span><span style="color:#A6ACCD;">([</span></span>
<span class="line"><span style="color:#A6ACCD;">  [</span><span style="color:#FF9CAC;">false</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">no</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  [</span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">yes</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">])</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#676E95;font-style:italic;">// 我们创建一个修改版本的map0</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> map1 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> map0</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">set</span><span style="color:#A6ACCD;">(</span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">maybe</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#676E95;font-style:italic;">// 💡 修改版本不同于原版本</span></span>
<span class="line"><span style="color:#A6ACCD;">assert</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">ok</span><span style="color:#A6ACCD;">(map1 </span><span style="color:#89DDFF;">!==</span><span style="color:#A6ACCD;"> map0)</span></span>
<span class="line"><span style="color:#A6ACCD;">assert</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">equal</span><span style="color:#A6ACCD;">(map1</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">equals</span><span style="color:#A6ACCD;">(map0)</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">false</span><span style="color:#A6ACCD;">) </span><span style="color:#676E95;font-style:italic;">// A</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#676E95;font-style:italic;">// 我们撤销之前的改变</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> map2 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> map1</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">set</span><span style="color:#A6ACCD;">(</span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">yes</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#676E95;font-style:italic;">// 💡 map2是不同于map0的新对象</span></span>
<span class="line highlighted"><span style="color:#676E95;font-style:italic;">// 但是它们内容相同</span></span>
<span class="line"><span style="color:#A6ACCD;">assert</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">ok</span><span style="color:#A6ACCD;">(map2 </span><span style="color:#89DDFF;">!==</span><span style="color:#A6ACCD;"> map0)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">assert</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">equal</span><span style="color:#A6ACCD;">(map2</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">equals</span><span style="color:#A6ACCD;">(map0)</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// (B)</span></span></code></pre></div><p>注意：</p><ul><li>像<code>.set()</code>这样的“破坏性”操作不会修改接收方，而是返回修改后的副本</li><li>为了检查两个数据结构是否具有相同的内容，我们使用内置的<code>.equals()</code>方法(第A行和第B行)</li></ul><p id="5.2"></p><h3 id="_5-2-immer" tabindex="-1">5.2 Immer <a class="header-anchor" href="#_5-2-immer" aria-label="Permalink to &quot;5.2 Immer&quot;">​</a></h3><p><a href="https://immerjs.github.io/immer/" target="_blank" rel="noreferrer">Immer</a> 仓库描述如下：</p><ul><li>通过改变当前状态创建下一个不可变状态</li></ul><p>Immer帮助非破坏性地更新(可能嵌套)普通对象、数组、Sets和Maps。即不涉及到自定义数据结构。</p><p>🌰：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight has-highlighted-lines"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">produce</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">immer/dist/immer.module.js</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> people </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> [</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Jane</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">work</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">employer</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Acme</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">}}</span></span>
<span class="line"><span style="color:#A6ACCD;">]</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> modifiedPeople </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">produce</span><span style="color:#A6ACCD;">(people</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">draft</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line highlighted"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">draft</span><span style="color:#F07178;">[</span><span style="color:#F78C6C;">0</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">work</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">employer</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Cyberdyne</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line highlighted"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">draft</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">John</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> work</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">employer</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Spectre</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">}}</span><span style="color:#F07178;">)</span></span>
<span class="line highlighted"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">assert</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">deepEqual</span><span style="color:#A6ACCD;">(modifiedPeople</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> [</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Jane</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">work</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">employer</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Cyberdyne</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">}},</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">John</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">work</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">employer</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Spectre</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">}},</span></span>
<span class="line"><span style="color:#A6ACCD;">])</span></span>
<span class="line"><span style="color:#A6ACCD;">assert</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">deepEqual</span><span style="color:#A6ACCD;">(people</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> [</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Jane</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">work</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">employer</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Acme</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">}},</span></span>
<span class="line"><span style="color:#A6ACCD;">])</span></span></code></pre></div><p>存储在 <code>people.produce()</code> 中的原数据给我们提供了一个变量 <code>draft</code>。我们假装这个变量是 <code>people</code>，然后使用正常的破坏性改变操作。<strong>Immer会拦截这些操作</strong>。它不会改变 <code>draft</code>，而是对 <code>people</code> 进行非破坏性的改变。结果通过 <code>modifiedPeople</code> 进行引用。额外的好处是，它是深度不可变的🚀。</p><p><code>assert.deepEqual()</code> 能正常运作，是因为Immer返回的是普通对象和数组🤩。</p><p>2022年07月29日21:39:12</p>`,93),e=[o];function t(c,r,y,F,D,i){return n(),a("div",null,e)}const d=s(p,[["render",t]]);export{C as __pageData,d as default};
