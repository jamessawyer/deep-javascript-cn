import{_ as s,c as a,o as n,a as l}from"./app.d0a0f41b.js";const F=JSON.parse('{"title":"结构算法","description":"","frontmatter":{"title":"结构算法"},"headers":[{"level":2,"title":"1️⃣ 为模式匹配算法做准备","slug":"_1️⃣-为模式匹配算法做准备","link":"#_1️⃣-为模式匹配算法做准备","children":[{"level":3,"title":"1.1 使用声明式规则指定匹配算法","slug":"_1-1-使用声明式规则指定匹配算法","link":"#_1-1-使用声明式规则指定匹配算法","children":[]},{"level":3,"title":"1.2 基于声明式规则计算表达式","slug":"_1-2-基于声明式规则计算表达式","link":"#_1-2-基于声明式规则计算表达式","children":[]}]},{"level":2,"title":"2️⃣ ⭐模式匹配算法","slug":"_2️⃣-⭐模式匹配算法","link":"#_2️⃣-⭐模式匹配算法","children":[{"level":3,"title":"2.1 模式","slug":"_2-1-模式","link":"#_2-1-模式","children":[]},{"level":3,"title":"2.2 对变量的规则","slug":"_2-2-对变量的规则","link":"#_2-2-对变量的规则","children":[]},{"level":3,"title":"2.3 对对象模式的规则","slug":"_2-3-对对象模式的规则","link":"#_2-3-对对象模式的规则","children":[]},{"level":3,"title":"2.4 对数组模式的规则","slug":"_2-4-对数组模式的规则","link":"#_2-4-对数组模式的规则","children":[]}]},{"level":2,"title":"3️⃣ 空对象模式和空数组模式","slug":"_3️⃣-空对象模式和空数组模式","link":"#_3️⃣-空对象模式和空数组模式","children":[]},{"level":2,"title":"4️⃣ 应用该算法","slug":"_4️⃣-应用该算法","link":"#_4️⃣-应用该算法","children":[{"level":3,"title":"4.1 背景：通过匹配传入参数","slug":"_4-1-背景-通过匹配传入参数","link":"#_4-1-背景-通过匹配传入参数","children":[]},{"level":3,"title":"4.2 使用 move2()","slug":"_4-2-使用-move2","link":"#_4-2-使用-move2","children":[]},{"level":3,"title":"4.3 使用 move1()","slug":"_4-3-使用-move1","link":"#_4-3-使用-move1","children":[]},{"level":3,"title":"4.4 总结：默认值是模式部分的一个功能","slug":"_4-4-总结-默认值是模式部分的一个功能","link":"#_4-4-总结-默认值是模式部分的一个功能","children":[]}]}],"relativePath":"2/The-destructuring-algorithm.md","lastUpdated":1677749232000}'),p={name:"2/The-destructuring-algorithm.md"},o=l(`<p>目录：</p><nav class="table-of-contents"><ul><li><a href="#_1️⃣-为模式匹配算法做准备">1️⃣ 为模式匹配算法做准备</a><ul><li><a href="#_1-1-使用声明式规则指定匹配算法">1.1 使用声明式规则指定匹配算法</a></li><li><a href="#_1-2-基于声明式规则计算表达式">1.2 基于声明式规则计算表达式</a></li></ul></li><li><a href="#_2️⃣-⭐模式匹配算法">2️⃣ ⭐模式匹配算法</a><ul><li><a href="#_2-1-模式">2.1 模式</a></li><li><a href="#_2-2-对变量的规则">2.2 对变量的规则</a></li><li><a href="#_2-3-对对象模式的规则">2.3 对对象模式的规则</a></li><li><a href="#_2-4-对数组模式的规则">2.4 对数组模式的规则</a></li></ul></li><li><a href="#_3️⃣-空对象模式和空数组模式">3️⃣ 空对象模式和空数组模式</a></li><li><a href="#_4️⃣-应用该算法">4️⃣ 应用该算法</a><ul><li><a href="#_4-1-背景-通过匹配传入参数">4.1 背景：通过匹配传入参数</a></li><li><a href="#_4-2-使用-move2">4.2 使用 move2()</a></li><li><a href="#_4-3-使用-move1">4.3 使用 move1()</a></li><li><a href="#_4-4-总结-默认值是模式部分的一个功能">4.4 总结：默认值是模式部分的一个功能</a></li></ul></li></ul></nav><p>本章，我们将从不同角度看解构：作为递归匹配算法。</p><p><em>这个算法让我们更好的理解默认值。</em> 这将在最后有用，我们将试图找出以下两个函数的不同之处:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">move</span><span style="color:#89DDFF;">({</span><span style="color:#A6ACCD;font-style:italic;">x</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">y</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{})</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">move</span><span style="color:#89DDFF;">({</span><span style="color:#A6ACCD;font-style:italic;">x</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">y</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">x</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">y</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">})</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"></span></code></pre></div><p id="1"></p><h2 id="_1️⃣-为模式匹配算法做准备" tabindex="-1">1️⃣ 为模式匹配算法做准备 <a class="header-anchor" href="#_1️⃣-为模式匹配算法做准备" aria-hidden="true">#</a></h2><p>📚 解构赋值看起来如下：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">«pattern»</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">«value»</span></span>
<span class="line"></span></code></pre></div><p><em>我们想使用 <code>pattern</code> 从 <code>value</code> 中提取数据</em>。</p><p>👩🏻‍🏫 我们将学习一种执行这种赋值的算法。 这个算法在函数式编程成称之为 <em>模式匹配（<code>pattern matching</code> 简称为：匹配）</em> 😎。它指定操作符 <code>←</code> (&quot; match against &quot;)，该操作符将 <em>模式</em> 与 <em>值</em> 匹配，并在这样做时赋值给变量:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">«pattern»</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">←</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">«value»</span></span>
<span class="line"></span></code></pre></div><p>我们这里只探索解构赋值，但是解构变量声明（<code>destructuring variable declarations</code>）和 解构参数定义（<code>destructuring parameter definitions</code>） 工作原理类似。我们也不会深入一些高级功能：计算属性keys，属性值简写，以及对象属性和数组元素作为赋值的目标，这些都超出了本章的范围。</p><p>匹配操作符的规范由声明性规则组成，这些规则深入到两个操作数的结构中。声明符号可能需要一段时间适应，但是它使得规范更加的简洁。</p><p id="1.1"></p><h3 id="_1-1-使用声明式规则指定匹配算法" tabindex="-1">1.1 使用声明式规则指定匹配算法 <a class="header-anchor" href="#_1-1-使用声明式规则指定匹配算法" aria-hidden="true">#</a></h3><p>本章中使用的声明式规则对输入进行操作，并通过副作用（<code>side effects</code>）的形式产生算法的结果。下面就是这样的一个规则📚：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight has-highlighted-lines" tabindex="0"><code><span class="line highlighted"><span style="color:#FFCB6B;">//</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">规则</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">2c</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">{</span><span style="color:#FFCB6B;">key:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">«pattern»,</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">«properties»}</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">←</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">obj</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">//</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">head</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">«pattern»</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">←</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">obj.key</span><span style="color:#A6ACCD;">                  </span><span style="color:#C3E88D;">//</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">body</span></span>
<span class="line"><span style="color:#89DDFF;">{</span><span style="color:#FFCB6B;">«properties»</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> ← obj</span></span>
<span class="line"></span></code></pre></div><p>这个规则包含下面部分：</p><ol><li><code>(2c)</code> 是规则的编号（number），这个编号用于表示该规则</li><li>头（<code>head</code> 第一行） 描述，输入必须是什么样子的，才能应用这个规则</li><li>主体（<code>body</code> 后面2行）描述应用规则后会发生什么</li></ol><p>在规则 <code>(2c)</code> 中，head意味着如果存在具有至少一个属性（其键是 <code>key</code>）和零个或多个剩余属性的对象模式，则可以应用此规则。<em>这个规则的效果是继续执行与 <code>obj.key</code> 匹配的属性值模式和其他属性和 <code>obj</code> 相匹配。</em></p><p>让我们考虑本章另一个规则：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight has-highlighted-lines" tabindex="0"><code><span class="line highlighted"><span style="color:#FFCB6B;">//</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">规则</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">2e</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">{}</span><span style="color:#A6ACCD;"> ← obj</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">no</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">properties</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">left</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;">  // head</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">//</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">我们已经完成了</span><span style="color:#A6ACCD;">               </span><span style="color:#C3E88D;">//</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">body</span></span>
<span class="line"></span></code></pre></div><p>在规则 <code>(2e)</code> 中， head表示，如果空对象模式 <code>{}</code> 与值obj匹配，则执行此规则。而body则表示，这种情况下，我们已经完成了。</p><p>🚀 <strong>规则<code>(2c)</code>和规则<code>(2e)</code>共同形成一个声明性循环，在箭头左侧的模式属性上迭代。</strong></p><p id="1.2"></p><h3 id="_1-2-基于声明式规则计算表达式" tabindex="-1">1.2 基于声明式规则计算表达式 <a class="header-anchor" href="#_1-2-基于声明式规则计算表达式" aria-hidden="true">#</a></h3><p><em>完成算法是通过一系列声明式规则指定的。😎</em> 假设我们想计算下面匹配表达式：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">{</span><span style="color:#FFCB6B;">first:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">f,</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">last:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">l}</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">←</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">obj</span></span>
<span class="line"></span></code></pre></div><p>为了应用一系列规则，我们从上到下检查他们，然后执行第一个可应用的规则。如果该规则body中存在匹配表达式，则该规则再次被应用，依此类推。</p><p><em>📚 有时head会包含一个条件来决定规则是否可被应用</em>， 比如：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight has-highlighted-lines" tabindex="0"><code><span class="line highlighted"><span style="color:#FFCB6B;">//</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">规则</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">3a</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">«elements»</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> ← non_iterable    // head</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(!</span><span style="color:#FFCB6B;">isIterable(non_iterable</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;">) // head中的条件</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#FFCB6B;">throw</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">TypeError</span><span style="color:#89DDFF;">();</span><span style="color:#A6ACCD;">         </span><span style="color:#FFCB6B;">//</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">body</span></span>
<span class="line"></span></code></pre></div><p id="2"></p><h2 id="_2️⃣-⭐模式匹配算法" tabindex="-1">2️⃣ ⭐模式匹配算法 <a class="header-anchor" href="#_2️⃣-⭐模式匹配算法" aria-hidden="true">#</a></h2><p id="2.1"></p><h3 id="_2-1-模式" tabindex="-1">2.1 模式 <a class="header-anchor" href="#_2-1-模式" aria-hidden="true">#</a></h3><p>🚀🚀 一个模式是下面中的某一种：</p><ul><li>一个变量： <code>x</code></li><li>一个对象模式： <code>{«properties»}</code></li><li>一个数组模式：<code>[«elements»]</code></li></ul><p>接下来的三个部分指定了在匹配表达式中处理这三种情况的规则。</p><p id="2.2"></p><h3 id="_2-2-对变量的规则" tabindex="-1">2.2 对变量的规则 <a class="header-anchor" href="#_2-2-对变量的规则" aria-hidden="true">#</a></h3><p>规则 <code>1</code></p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight has-highlighted-lines" tabindex="0"><code><span class="line highlighted"><span style="color:#FFCB6B;">//</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">规则</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#FFCB6B;">x</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">←</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">value</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">包含</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">null</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">和</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">undefined</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#FFCB6B;">x</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">value</span></span>
<span class="line"></span></code></pre></div><p id="2.3"></p><h3 id="_2-3-对对象模式的规则" tabindex="-1">2.3 对对象模式的规则 <a class="header-anchor" href="#_2-3-对对象模式的规则" aria-hidden="true">#</a></h3><p>规则 <code>(2a)</code>:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">{</span><span style="color:#FFCB6B;">«properties»</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> ← undefined </span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">illegal</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">value</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#FFCB6B;">throw</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">TypeError</span><span style="color:#89DDFF;">();</span></span>
<span class="line"></span></code></pre></div><p>规则 <code>(2b)</code>:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">{</span><span style="color:#FFCB6B;">«properties»</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> ← null </span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">illegal</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">value</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">throw</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">TypeError</span><span style="color:#89DDFF;">();</span></span>
<span class="line"></span></code></pre></div><p>规则 <code>(2c)</code>:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">{</span><span style="color:#FFCB6B;">key:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">«pattern»,</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">«properties»}</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">←</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">obj</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">«pattern»</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">←</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">obj.key</span><span style="color:#A6ACCD;">  </span><span style="color:#C3E88D;">//</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">表示</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">obj.key</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">匹配</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">pattern</span></span>
<span class="line"><span style="color:#89DDFF;">{</span><span style="color:#FFCB6B;">«properties»</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> ← obj // 表示 obj 其余属性匹配 properties</span></span>
<span class="line"></span></code></pre></div><p>规则 <code>(2d)</code>:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">{</span><span style="color:#FFCB6B;">key:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">«pattern»</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">default_value,</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">«properties»}</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">←</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">obj</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">tmp</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">obj.key</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">tmp</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">!==</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">undefined</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#FFCB6B;">«pattern»</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">←</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">tmp</span><span style="color:#A6ACCD;">  </span><span style="color:#C3E88D;">//</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">如果匹配的值不为</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">undefined</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">则直接匹配</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#FFCB6B;">«pattern»</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">←</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">default_value</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">//</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">如果匹配的值为undefined</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">则将</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">默认值匹配给模式</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">{</span><span style="color:#FFCB6B;">«properties»</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> ← obj</span></span>
<span class="line"></span></code></pre></div><p>规则 <code>(2e)</code>:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">{}</span><span style="color:#A6ACCD;"> ← obj </span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">no</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">properties</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">left</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">//</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">We</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">are</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">finished</span></span>
<span class="line"></span></code></pre></div><ul><li>规则 <code>2a</code> &amp; <code>2b</code> 处理非法值</li><li>规则 <code>2c-2e</code> 循环遍历模式的属性</li><li>规则 <code>2d</code> 表示如果没有匹配到 <code>obj</code> 中的属性，则使用默认值</li></ul><p id="2.4"></p><h3 id="_2-4-对数组模式的规则" tabindex="-1">2.4 对数组模式的规则 <a class="header-anchor" href="#_2-4-对数组模式的规则" aria-hidden="true">#</a></h3><p><strong>数组模式和可迭代</strong>。数组解构算法从数组模式和可迭代开始：</p><p>规则 <code>(3a)</code>:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">«elements»</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> ← non_iterable </span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">illegal</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">value</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(!</span><span style="color:#FFCB6B;">isIterable(non_iterable</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#FFCB6B;">throw</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">TypeError</span><span style="color:#89DDFF;">();</span></span>
<span class="line"></span></code></pre></div><p>规则 <code>(3b)</code>:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">«elements»</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> ← iterable</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">isIterable(iterable</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;">) // 如果是可迭代的</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#FFCB6B;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">iterator</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">iterable[Symbol.iterator]</span><span style="color:#89DDFF;">();</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">//</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">获取迭代器</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#FFCB6B;">«elements»</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">←</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">iterator</span></span>
<span class="line"></span></code></pre></div><p>辅助函数：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">isIterable</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">value</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> (</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">value</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">!==</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">null</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">typeof</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">value</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">object</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">typeof</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">value</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">Symbol</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">iterator</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">function</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// 可迭代对象包含 [Symbol.iterator] 方法</span></span>
<span class="line"><span style="color:#F07178;">  )</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p><strong>数组元素和迭代器</strong>。这个算法继续：</p><ul><li>模式元素（箭头左侧 <code>«elements»</code>）</li><li>迭代器通过可迭代获取（箭头右侧 <code>iterator</code>）</li></ul><p>下面是规则：</p><p>规则 <code>(3c)</code>:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">«pattern»,</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">«elements»</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">←</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">iterator</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">«pattern»</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">←</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">getNext</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">iterator</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">//</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">最后一个item是</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">undefined</span></span>
<span class="line"><span style="color:#FFCB6B;">«elements»</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">←</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">iterator</span></span>
<span class="line"></span></code></pre></div><p>规则 <code>(3d)</code>:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">«pattern»</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">default_value,</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">«elements»</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">←</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">iterator</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">tmp</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">getNext</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">iterator</span><span style="color:#89DDFF;">);</span><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">//</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">最后一个item是</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">undefined</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">tmp</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">!==</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">undefined</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">«pattern»</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">←</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">tmp</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">«pattern»</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">←</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">default_value</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#FFCB6B;">«elements»</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">←</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">iterator</span></span>
<span class="line"></span></code></pre></div><p>规则 <code>(3e)</code>:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">«elements»</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">←</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">iterator</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">hole,</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">elision</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">//</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\`</span><span style="color:#FFCB6B;">,</span><span style="color:#89DDFF;">\`</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">表示第一个元素跳过匹配</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">getNext(iterator</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">//</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">skip</span></span>
<span class="line"><span style="color:#FFCB6B;">«elements»</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">←</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">iterator</span></span>
<span class="line"></span></code></pre></div><p>规则 <code>(3f)</code>: (spreading操作符)</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">...</span><span style="color:#FFCB6B;">«pattern»</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">←</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">iterator</span><span style="color:#A6ACCD;">  </span><span style="color:#C3E88D;">//</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">always</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">last</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">part!</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">展开符总是在最后</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#FFCB6B;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">tmp</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[];</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">elem</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">of</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">iterator</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">tmp.push(elem</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#FFCB6B;">«pattern»</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">←</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">tmp</span></span>
<span class="line"></span></code></pre></div><p>规则 <code>(3g)</code>:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">←</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">iterator</span><span style="color:#A6ACCD;">   </span><span style="color:#C3E88D;">//</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">no</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">elements</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">left</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">没有剩余元素了</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">//</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">We</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">are</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">finished</span></span>
<span class="line"></span></code></pre></div><p>辅助函数：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">getNext</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">iterator</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">done</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">value</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">iterator</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">next</span><span style="color:#F07178;">()</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">done</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">?</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">undefined</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">value</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p><strong>一个迭代器结束和对象中属性缺失类似。😅</strong></p><p id="3"></p><h2 id="_3️⃣-空对象模式和空数组模式" tabindex="-1">3️⃣ 空对象模式和空数组模式 <a class="header-anchor" href="#_3️⃣-空对象模式和空数组模式" aria-hidden="true">#</a></h2><p>这个算法规则存在有趣的结果：<em>我们可以解构空对象模式和空数组模式</em>。😎 (译者注：模式是箭头左侧，值是箭头右侧， <code>«pattern» ← «value»</code>)</p><p>给定一个空对象模式 <code>{}</code>：如果待解构的值既不是 <code>undefined</code> 也不是 <code>null</code>，则什么也不会发生，否则，如果对 <code>undefined | null</code> 进行解构，会抛出 <code>TypeError</code></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight has-highlighted-lines" tabindex="0"><code><span class="line highlighted"><span style="color:#676E95;font-style:italic;">// 被解构的既不是 \`undefined\` 也不是 \`null\`</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">123</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">// OK</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#676E95;font-style:italic;">// 解构 null 直接抛出 TypeError</span></span>
<span class="line"><span style="color:#A6ACCD;">assert</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">throws</span><span style="color:#A6ACCD;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">null</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">/</span><span style="color:#89DDFF;font-style:italic;">^</span><span style="color:#C3E88D;">TypeError: Cannot destructure &#39;null&#39; as it is null.</span><span style="color:#89DDFF;font-style:italic;">$</span><span style="color:#89DDFF;">/</span></span>
<span class="line"><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><p>给定一个空的数组模式 <code>[]</code> ： 如果被解构的值是可迭代的，则什么也不会发生，否则，，会抛出 <code>TypeError</code></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight has-highlighted-lines" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 字符串是可迭代的</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">abc</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// OK</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">assert</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">throws</span><span style="color:#A6ACCD;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line highlighted"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">[]</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">123</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// 数字是不可迭代的</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">/</span><span style="color:#89DDFF;font-style:italic;">^</span><span style="color:#C3E88D;">TypeError: 123 is not iterable</span><span style="color:#89DDFF;font-style:italic;">$</span><span style="color:#89DDFF;">/</span></span>
<span class="line"><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><p>换句话讲：<strong>空解构模式（<code>Empty destructuring patterns</code>） 强制 值（<code>value</code>）必须符合某种特质，但是没有任何效果</strong></p><p id="4"></p><h2 id="_4️⃣-应用该算法" tabindex="-1">4️⃣ 应用该算法 <a class="header-anchor" href="#_4️⃣-应用该算法" aria-hidden="true">#</a></h2><p>📚 在JS中，具名参数通过对象进行模拟：调用者（<code>the caller</code>， 函数执行）使用对象字面量，被调用者（<code>the callee</code> ， 函数定义）使用解构。这种模拟可参考 <a href="https://exploringjs.com/impatient-js/ch_callables.html#named-parameters" target="_blank" rel="noreferrer">named-parameters - impatient-js</a> 。 下面示例🌰：<code>move1()</code>有2个参数 <code>x</code> &amp; <code>y</code> ：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">move1</span><span style="color:#89DDFF;">({</span><span style="color:#A6ACCD;font-style:italic;">x</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">y</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{})</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// A</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> [</span><span style="color:#A6ACCD;">x</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">y</span><span style="color:#F07178;">]</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">assert</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">deepEqual</span><span style="color:#A6ACCD;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">move1</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">x</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">y</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">8</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  [</span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">8</span><span style="color:#A6ACCD;">]</span></span>
<span class="line"><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">assert</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">deepEqual</span><span style="color:#A6ACCD;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">move1</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">x</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  [</span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">]</span></span>
<span class="line"><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">assert</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">deepEqual</span><span style="color:#A6ACCD;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">move1</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  [</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">]</span></span>
<span class="line"><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">assert</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">deepEqual</span><span style="color:#A6ACCD;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">move1</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  [</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">]</span></span>
<span class="line"><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><p><code>A</code> 行中有3个默认值：</p><ul><li>前2个默认值（<code>{x = 0, y = 0}</code>）允许我们忽略 <code>x</code> &amp; <code>y</code></li><li>第3个默认值（<code>{x = 0, y = 0} = {}</code>）允许我们调用 <code>move1()</code> 不传入参数</li></ul><p>为什么我们要像上面那样定义参数，而不是像下面呢：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">move2</span><span style="color:#89DDFF;">({</span><span style="color:#A6ACCD;font-style:italic;">x</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">y</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">x</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">y</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">})</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> [</span><span style="color:#A6ACCD;">x</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">y</span><span style="color:#F07178;">]</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>为了查看为什么 <code>move1()</code> 是正确的，我们将在2个例子中同时用2个函数。在这之前，我们先看看传入的参数如何通过 <em>匹配</em> 来解释😎。</p><p id="4.1"></p><h3 id="_4-1-背景-通过匹配传入参数" tabindex="-1">4.1 背景：通过匹配传入参数 <a class="header-anchor" href="#_4-1-背景-通过匹配传入参数" aria-hidden="true">#</a></h3><p>对于函数调用，<em>形参（在函数定义内）与实参（在函数调用内）相匹配</em>。作为示例，下面分别是函数定义和函数调用：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 函数定义</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// a, b 是形参</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">func</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">a</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">b</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 函数调用 </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 1, 2是实参</span></span>
<span class="line"><span style="color:#82AAFF;">func</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><p>参数 <code>a</code> &amp; <code>b</code> 的设置类似下面解构：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">a</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">, b</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> ← </span><span style="color:#89DDFF;">[]</span></span>
<span class="line"></span></code></pre></div><p id="4.2"></p><h3 id="_4-2-使用-move2" tabindex="-1">4.2 使用 move2() <a class="header-anchor" href="#_4-2-使用-move2" aria-hidden="true">#</a></h3><p>我们先看看函数 <code>move2</code> 中的解构效果。</p><blockquote><p><strong>示例1</strong>🌰 调用 <code>move2()</code></p></blockquote><p>导致下面解构：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">{ x, y } </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> { x: </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">, y: </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">}</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> ← </span><span style="color:#89DDFF;">[]</span></span>
<span class="line"></span></code></pre></div><p>左侧的单数组元素模式没有匹配到右侧的空数组值，这也是为什么 <code>{x, y}</code> 匹配默认值，而不是来自右侧的数据（规则 <code>3b</code> &amp; <code>3d</code>）:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">x,</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">y</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">←</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">x:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#C3E88D;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">y:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">}</span></span>
<span class="line"></span></code></pre></div><p>左侧包含 <em>属性值简写（<code>property value shorthands</code>）</em>。它实际的形式为：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">x:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">x,</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">y:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">y</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">←</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">x:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#C3E88D;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">y:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">}</span></span>
<span class="line"></span></code></pre></div><p>这个解构导致下面2个赋值（规则 <a href="#2.4">2c</a> &amp; 规则 <a href="#2.1">1</a>）:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">x </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">y </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>这是我们想要的。但是，下面例子中，我们就没有那么幸运了。</p><blockquote><p><strong>示例2</strong>🌰 我们调用 <code>move2({z: 3})</code></p></blockquote><p>这将导致如下解构：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">{ x, y } </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> { x: </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">, y: </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">}</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> ← </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">{ z: </span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;"> }</span><span style="color:#89DDFF;">]</span></span>
<span class="line"></span></code></pre></div><p>右侧在数组索引 <code>0</code> 位置有一个数组元素。因此，默认值被忽略，下一个步骤是（规则 <a href="#2.4">3d</a>）:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">x,</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">y</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">←</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">z:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">}</span></span>
<span class="line"></span></code></pre></div><p>这导致x和y都被设置为 <code>undefined</code>，这并不是我们想要的😥。问题在于 <code>{x, y}</code> 没有匹配默认值，而是匹配到了 <code>{z: 3}</code></p><p id="4.3"></p><h3 id="_4-3-使用-move1" tabindex="-1">4.3 使用 move1() <a class="header-anchor" href="#_4-3-使用-move1" aria-hidden="true">#</a></h3><blockquote><p><strong>示例1</strong>🌰 调用 <code>move1()</code></p></blockquote><p>导致下面解构：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">{ x</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">, y</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">} </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> {}</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> ← </span><span style="color:#89DDFF;">[]</span></span>
<span class="line"></span></code></pre></div><p>右侧数组元素为空，因此使用默认值（规则 <a href="#2.4">3d</a>）:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">x</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">0</span><span style="color:#C3E88D;">,</span><span style="color:#A6ACCD;"> y</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">0</span><span style="color:#C3E88D;">}</span><span style="color:#A6ACCD;"> ← </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"></span></code></pre></div><p>左侧包含属性简写，相当于：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">{</span><span style="color:#FFCB6B;">x:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">x=</span><span style="color:#F78C6C;">0</span><span style="color:#C3E88D;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">y:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">y=</span><span style="color:#F78C6C;">0</span><span style="color:#C3E88D;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">←</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">{}</span></span>
<span class="line"></span></code></pre></div><p><code>x</code> 和 <code>y</code> 都没有匹配到右侧的空对象值。因此，默认值被使用，下面结构被执行 （规则 <a href="#2.3">2d</a>）:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">x</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">←</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span></span>
<span class="line"><span style="color:#FFCB6B;">y</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">←</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span></span>
<span class="line"></span></code></pre></div><p>这将导致下面赋值（规则 <a href="#2.1">1</a>）：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">x </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span></span>
<span class="line"><span style="color:#A6ACCD;">y </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span></span>
<span class="line"></span></code></pre></div><p>这正是我们想要的。</p><blockquote><p><strong>示例2</strong>🌰 move1({z: 3})</p></blockquote><p>解构：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">{x</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">, y</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">} </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> {}</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> ← </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">{ z: </span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;"> }</span><span style="color:#89DDFF;">]</span></span>
<span class="line"></span></code></pre></div><p>数组模式第一个元素匹配右侧，这个匹配导致解构继续（规则 <a href="#2.4">3d</a>）:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> x</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">0</span><span style="color:#C3E88D;">,</span><span style="color:#A6ACCD;"> y</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> ← </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">z:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">}</span></span>
<span class="line"></span></code></pre></div><p>和示例1一样，右侧不存在x,y属性，因此默认值被使用：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">x </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span></span>
<span class="line"><span style="color:#A6ACCD;">y </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span></span>
<span class="line"></span></code></pre></div><p>这正是我们想要的🤩。现在 <code>x &amp; y</code> 和 <code>{z: 3}</code> 再去匹配不再是问题，因为它们拥有本地默认值。</p><p id="4.4"></p><h3 id="_4-4-总结-默认值是模式部分的一个功能" tabindex="-1">4.4 总结：默认值是模式部分的一个功能 <a class="header-anchor" href="#_4-4-总结-默认值是模式部分的一个功能" aria-hidden="true">#</a></h3><p>上面例子展示了默认值是模式部分（即模式匹配的左侧部分，对象属性或者数组元素）。如果某个部分没有匹配或者匹配了 <code>undefined</code>，则默认值将会被使用。即，<strong>使用模式匹配默认值代替</strong>。😎</p><p>译者注：</p><ol><li>从模式匹配的角度讲解解构</li><li>模式匹配分为 <strong>左侧 模式</strong> + <strong>右侧 值</strong></li><li>模式匹配的3种情形 <ol><li>变量赋值</li><li>对象模式匹配</li><li>数组模式匹配</li></ol></li><li>空对象模式和空数组模式匹配对右侧值部分的要求 <ol><li>空对象模式要求值不能为 <code>null</code> | <code>undefined</code> ，否则抛出错误</li><li>空数组模式要求值具有可迭代，否则抛出错误</li></ol></li><li>不同默认参数的写法，会导致不同的模式匹配，从而产生的效果也是不同的</li></ol><p>2022年07月14日17:59:59</p>`,151),e=[o];function t(c,r,C,y,D,i){return n(),a("div",null,e)}const d=s(p,[["render",t]]);export{F as __pageData,d as default};
