import{_ as a,c as l,o as p,O as n,z as s}from"./chunks/framework.103df890.js";const g=JSON.parse('{"title":"属性的枚举性","description":"","frontmatter":{"title":"属性的枚举性"},"headers":[],"relativePath":"4/Enumerability-of-Properties.md","lastUpdated":1682474873000}'),o={name:"4/Enumerability-of-Properties.md"},e=n(`<p>目录：</p><nav class="table-of-contents"><ul><li><a href="#_1️⃣-可枚举性是如何影响属性迭代构造的">1️⃣ 可枚举性是如何影响属性迭代构造的</a><ul><li><a href="#_1-1-⭐只考虑可枚举属性的操作">1.1 ⭐只考虑可枚举属性的操作</a></li><li><a href="#_1-2-⭐同时考虑可枚举和不可枚举属性的操作">1.2 ⭐同时考虑可枚举和不可枚举属性的操作</a></li><li><a href="#_1-3-内省操作命名规则">1.3 内省操作命名规则</a></li></ul></li><li><a href="#_2️⃣-预定义和创建的属性的枚举性">2️⃣ 预定义和创建的属性的枚举性</a></li><li><a href="#_3️⃣-可枚举性的使用场景">3️⃣ 可枚举性的使用场景</a><ul><li><a href="#_3-1-使用场景-对-for-in-循环隐藏属性">3.1 使用场景：对 for-in 循环隐藏属性</a></li><li><a href="#_3-2-使用场景-将属性标记为不可拷贝">3.2 使用场景：将属性标记为不可拷贝</a></li><li><a href="#_3-3-将属性标记为私有">3.3 将属性标记为私有</a></li><li><a href="#_3-4-json-stringify-隐藏自己的属性">3.4 JSON.stringify()隐藏自己的属性</a></li></ul></li><li><a href="#_4️⃣-总结">4️⃣ 总结</a></li></ul></nav><p>可枚举性是对象属性的一个 <em>特性（<code>attribute</code>）</em>。本章将更进一步看看它是如何使用的，以及它如何影响 <code>Object.keys()</code> &amp; <code>Object.assign()</code> 这些操作的。</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>前置知识：属性特性(Property Attributes)</p></div><p id="1"></p><h2 id="_1️⃣-可枚举性是如何影响属性迭代构造的" tabindex="-1">1️⃣ 可枚举性是如何影响属性迭代构造的 <a class="header-anchor" href="#_1️⃣-可枚举性是如何影响属性迭代构造的" aria-label="Permalink to &quot;1️⃣ 可枚举性是如何影响属性迭代构造的&quot;">​</a></h2><p>为了演示各种操作如何被可枚举性影响的，我们使用下面对象 <code>obj</code>，它的原型是 <code>proto</code>。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight has-highlighted-lines"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 原型</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> protoEnumSymbolKey </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Symbol</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">protoEnumSymbolKey</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> protoNonEnumSymbolKey </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Symbol</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">protoNonEnumSymbolKey</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> proto </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">defineProperties</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{},</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line highlighted"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">protoEnumStringKey</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 字符串可枚举key</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">value</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">protoEnumStringKeyValue</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">enumerable</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 可枚举</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line highlighted"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">protoEnumSymbolKey</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// symbol可枚举key</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">value</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">protoEnumSymbolKeyValue</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">enumerable</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line highlighted"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">protoNonEnumStringKey</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 字符串不可枚举key</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">value</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">protoNonEnumStringKeyValue</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">enumerable</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">false</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 不可枚举</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line highlighted"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">protoNonEnumSymbolKey</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// symbol不可枚举key</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">value</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">protoNonEnumSymbolKeyValue</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">enumerable</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">false</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> objEnumSymbolKey </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Symbol</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">objEnumSymbolKey</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> objNonEnumSymbolKey </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Symbol</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">objNonEnumSymbolKey</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> obj </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">create</span><span style="color:#A6ACCD;">(proto</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">objEnumStringKey</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">value</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">objEnumStringKeyValue</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">enumerable</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">objEnumSymbolKey</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">value</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">objEnumSymbolKeyValue</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">enumerable</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">objNonEnumStringKey</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">value</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">objNonEnumStringKey</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">enumerable</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">false</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">objNonEnumSymbolKey</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">value</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">objNonEnumSymbolKeyValue</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">enumerable</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">false</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span></code></pre></div><p id="1.1"></p><h3 id="_1-1-⭐只考虑可枚举属性的操作" tabindex="-1">1.1 ⭐只考虑可枚举属性的操作 <a class="header-anchor" href="#_1-1-⭐只考虑可枚举属性的操作" aria-label="Permalink to &quot;1.1 ⭐只考虑可枚举属性的操作&quot;">​</a></h3><p>👩🏻‍🏫 忽略不可枚举属性的操作：</p>`,11),t=s("table",null,[s("thead",null,[s("tr",null,[s("th",null,"操作"),s("th"),s("th",{style:{"text-align":"center"}},"String键"),s("th",{style:{"text-align":"center"}},"Symbol键"),s("th",{style:{"text-align":"center"}},"继承的")])]),s("tbody",null,[s("tr",null,[s("td",null,"Object.keys()"),s("td",null,"ES5"),s("td",{style:{"text-align":"center"}},"✅"),s("td",{style:{"text-align":"center"}},"🚫"),s("td",{style:{"text-align":"center"}},"🚫")]),s("tr",null,[s("td",null,"Object.values()"),s("td",null,"ES2017"),s("td",{style:{"text-align":"center"}},"✅"),s("td",{style:{"text-align":"center"}},"🚫"),s("td",{style:{"text-align":"center"}},"🚫")]),s("tr",null,[s("td",null,"Object.entries()"),s("td",null,"ES2017"),s("td",{style:{"text-align":"center"}},"✅"),s("td",{style:{"text-align":"center"}},"🚫"),s("td",{style:{"text-align":"center"}},"🚫")]),s("tr",null,[s("td",{"css-module":".x"},"Spreading"),s("td",null,"ES2018"),s("td",{style:{"text-align":"center"}},"✅"),s("td",{style:{"text-align":"center"}},"✅"),s("td",{style:{"text-align":"center"}},"🚫")]),s("tr",null,[s("td",null,"Object.assign()"),s("td",null,"ES6"),s("td",{style:{"text-align":"center"}},"✅"),s("td",{style:{"text-align":"center"}},"✅"),s("td",{style:{"text-align":"center"}},"🚫")]),s("tr",null,[s("td",null,"JSON.stringify()"),s("td",null,"ES5"),s("td",{style:{"text-align":"center"}},"✅"),s("td",{style:{"text-align":"center"}},"🚫"),s("td",{style:{"text-align":"center"}},"🚫")]),s("tr",null,[s("td",null,"for-in"),s("td",null,"ES1"),s("td",{style:{"text-align":"center"}},"✅"),s("td",{style:{"text-align":"center"}},"🚫"),s("td",{style:{"text-align":"center"}},"✅")])])],-1),c=n(`<p>下面操作（👆🏻表）只考虑可枚举属性：</p><ul><li><p><code>Object.keys()</code> 返回自身可枚举的字符串keys</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">keys</span><span style="color:#A6ACCD;">(obj)</span></span>
<span class="line"><span style="color:#A6ACCD;">[</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">objEnumStringKey</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">]</span></span></code></pre></div></li><li><p><code>Object.values()</code> 返回自身可枚举的字符串属性的值</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">values</span><span style="color:#A6ACCD;">(obj)</span></span>
<span class="line"><span style="color:#A6ACCD;">[</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">objEnumStringKeyValue</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">]</span></span></code></pre></div></li><li><p><code>Object.entries()</code> 返回自身可枚举字符串属性的 key-value 对。（注意 <code>Object.fromEntries()</code> 可以接收 <code>symbols</code> 作为keys，但是只创建可枚举属性）</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">entries</span><span style="color:#A6ACCD;">(obj)</span></span>
<span class="line"><span style="color:#A6ACCD;">[[</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">objEnumStringKey</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">objEnumStringKeyValue</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">]]</span></span></code></pre></div></li><li><p>对象字面量展开操作符（<code>Spreading {...x}</code>）只考虑自身可枚举属性（strings keys 或 symbols keys 😎）</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> copy </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;">obj </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">Reflect</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">ownKeys</span><span style="color:#A6ACCD;">(copy)</span></span>
<span class="line"><span style="color:#A6ACCD;">[</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">objEnumStringKey</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">objEnumSymbolKey</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">]</span></span></code></pre></div></li><li><p><code>JSON.stringify()</code> 只字符串化自身可枚举的字符串keys</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">JSON</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">stringify</span><span style="color:#A6ACCD;">(obj)</span></span>
<span class="line"><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">{&quot;objEnumStringKey&quot;:&quot;objEnumStringKeyValue&quot;}</span><span style="color:#89DDFF;">&#39;</span></span></code></pre></div></li><li><p><code>for-in</code> 循环遍历 <strong>自身或继承的</strong> 可枚举的字符串键属性🤩（译者注：唯一包含继承的属性迭代操作！！！）</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight has-highlighted-lines"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> propKeys </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> []</span></span>
<span class="line highlighted"><span style="color:#676E95;font-style:italic;">// 🚀 继承的可枚举字符串属性也会被遍历</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> (</span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> propKey </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;"> obj) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">propKeys</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">propKey</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">assert</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">deepEqual</span><span style="color:#A6ACCD;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">  propKeys</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 可以看出 原型 上的可枚举字符串key 也被遍历了 😎</span></span>
<span class="line"><span style="color:#A6ACCD;">  [</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">objEnumStringKey</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">protoEnumStringKey</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">]</span></span>
<span class="line"><span style="color:#A6ACCD;">)</span></span></code></pre></div></li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>💡 <code>for-in</code> 是唯一能对继承的可枚举字符串键属性有影响的操作。其余所有操作都<strong>只对自身属性</strong>有效。</p></div><p id="1.2"></p><h3 id="_1-2-⭐同时考虑可枚举和不可枚举属性的操作" tabindex="-1">1.2 ⭐同时考虑可枚举和不可枚举属性的操作 <a class="header-anchor" href="#_1-2-⭐同时考虑可枚举和不可枚举属性的操作" aria-label="Permalink to &quot;1.2 ⭐同时考虑可枚举和不可枚举属性的操作&quot;">​</a></h3><p>👩🏻‍🏫 同时考虑可枚举和不可枚举属性的操作：</p><table><thead><tr><th style="text-align:left;">操作</th><th></th><th style="text-align:center;">String键</th><th style="text-align:center;">Symbol键</th><th style="text-align:center;">继承的</th></tr></thead><tbody><tr><td style="text-align:left;">Object.getOwnPropertyNames()</td><td>ES5</td><td style="text-align:center;">✅</td><td style="text-align:center;">🚫</td><td style="text-align:center;">🚫</td></tr><tr><td style="text-align:left;">Object.getOwnPropertySymbols()</td><td>ES6</td><td style="text-align:center;">🚫</td><td style="text-align:center;">✅</td><td style="text-align:center;">🚫</td></tr><tr><td style="text-align:left;">Reflect.ownKeys()</td><td>ES6</td><td style="text-align:center;">✅</td><td style="text-align:center;">✅</td><td style="text-align:center;">🚫</td></tr><tr><td style="text-align:left;">Object.getOwnPropertyDescriptors()</td><td>ES2017</td><td style="text-align:center;">✅</td><td style="text-align:center;">✅</td><td style="text-align:center;">🚫</td></tr></tbody></table><p>下面操作（👆🏻表）既考虑可枚举属性，也考虑不可枚举属性：</p><ul><li><p><code>Object.getOwnPropertyNames()</code> 列举出所有 <strong>自身</strong> 字符串属性keys</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getOwnPropertyNames</span><span style="color:#A6ACCD;">(obj)</span></span>
<span class="line"><span style="color:#A6ACCD;">[</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">objEnumStringKey</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">objNonEnumStringKey</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">]</span></span></code></pre></div></li><li><p><code>Object.getOwnPropertySymbols()</code> 列举出所有 <strong>自身</strong> Symbol-keys 属性键</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getOwnPropertySymbols</span><span style="color:#A6ACCD;">(obj)</span></span>
<span class="line"><span style="color:#A6ACCD;">[</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">objEnumSymbolKey</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">objNonEnumSymbolKey</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">]</span></span></code></pre></div></li><li><p><code>Reflect.keys()</code> 列举出所有的自身属性keys 🚀</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">Reflect</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">keys</span><span style="color:#A6ACCD;">(obj)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">[</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">objEnumStringKey</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">objNonEnumStringKey</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">objEnumSymbolKey</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">objNonEnumSymbolKey</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">]</span></span></code></pre></div></li><li><p><code>Object.getOwnPropertyDescriptors()</code> 列举出所有自身属性描述器</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getOwnPropertyDescriptors</span><span style="color:#A6ACCD;">(obj)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#FFCB6B;">objEnumStringKey</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#FFCB6B;">value</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">objEnumStringKeyValue</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#FFCB6B;">writable</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">false</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#FFCB6B;">enumerable</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#FFCB6B;">configurable</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">false</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#FFCB6B;">objNonEnumStringKey</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#FFCB6B;">value</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">objNonEnumStringKeyValue</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#FFCB6B;">writable</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">false</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#FFCB6B;">enumerable</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">false</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#FFCB6B;">configurable</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">false</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#F07178;">  [</span><span style="color:#A6ACCD;">objEnumSymbolKey</span><span style="color:#F07178;">]: </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    value</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">objEnumSymbolKeyValue</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    writable</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">false</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    enumerable</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    configurable</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">false</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#F07178;">  [</span><span style="color:#A6ACCD;">objNonEnumSymbolKey</span><span style="color:#F07178;">]: </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    value</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">objNonEnumSymbolKeyValue</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    writable</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">false</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    enumerable</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">false</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    configurable</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">false</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div></li></ul><p id="1.3"></p><h3 id="_1-3-内省操作命名规则" tabindex="-1">1.3 内省操作命名规则 <a class="header-anchor" href="#_1-3-内省操作命名规则" aria-label="Permalink to &quot;1.3 内省操作命名规则&quot;">​</a></h3><p><strong>内省（<code>introspection</code>）</strong> 使程序能在运行时检测值的结构。这是一种<strong>元编程</strong>：正常程序是关于写程序；元编程是关于检测或者改变程序。</p><p>📚 在JS中，常见的内省操作有较短的名称，而很少使用的操作有较长的名称。<strong>忽略不可枚举属性是常态</strong>，这就是为什么有短名称的操作和没有长名称的操作:</p><ul><li><code>Object.keys()</code> 忽略不可枚举属性</li><li><code>Object.getOwnPropertyNames()</code> 列举所有自身字符串keys</li></ul><p>然而，<code>Reflect</code> 方法（例如 <code>Reflect.ownKeys()</code>） 偏离这个规则，<strong>因为 <code>Reflect</code> 提供的操作更加 <code>元（meta）</code>， 并和代理相关</strong>。</p><p>此外，还做了以下区分(从ES6开始，引入了Symbol)：</p><ul><li><em>Property keys</em> 要么是 strings，要么是 symbols</li><li><em>Property names</em> 为字符串属性keys</li><li><em>Property symbols</em> 为symbols属性keys</li></ul><p>因此，<code>Object.keys()</code> 更好的名字可能是 <code>Object.names()</code> 😅</p><p id="2"></p><h2 id="_2️⃣-预定义和创建的属性的枚举性" tabindex="-1">2️⃣ 预定义和创建的属性的枚举性 <a class="header-anchor" href="#_2️⃣-预定义和创建的属性的枚举性" aria-label="Permalink to &quot;2️⃣ 预定义和创建的属性的枚举性&quot;">​</a></h2><p>这一节中，我们将 <code>Object.getOwnPropertyDescriptor()</code> 缩写如下：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> desc </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Object</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">getOwnPropertyDescriptor</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">bind</span><span style="color:#A6ACCD;">(Object)</span></span></code></pre></div><p>大多数属性创建伴随着下面特性：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#FFCB6B;">writable</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#FFCB6B;">enumerable</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">false</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#FFCB6B;">configurable</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">true</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>👩🏻‍🏫 包括：</p><ul><li>赋值（<code>Assignment</code>）</li><li>对象字面量（<code>Object literals</code>）</li><li>类公有字段</li><li><code>Object.fromEntries()</code></li></ul></div><p>最重要的不可枚举属性有：</p><ul><li><p><strong>内置类的原型属性</strong></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">desc</span><span style="color:#A6ACCD;">(</span><span style="color:#FFCB6B;">Object</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">toSztring</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">enumerable</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// false</span></span></code></pre></div></li><li><p>通过用户定义的类创建的原型属性</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 类方法放在类原型上</span></span>
<span class="line"><span style="color:#82AAFF;">desc</span><span style="color:#A6ACCD;">(</span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">foo</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}}.</span><span style="color:#A6ACCD;">prototype</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">foo</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">enumerable</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// false</span></span></code></pre></div></li><li><p>数组的 <code>.length</code> 属性</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getOwnPropertyDescriptor</span><span style="color:#A6ACCD;">([]</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">length</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#FFCB6B;">value</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#FFCB6B;">writable</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">false</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#FFCB6B;">enumerable</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">false</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#FFCB6B;">configurable</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">false</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div></li></ul><p>接下来我们将看看枚举性的使用场景，也会告诉我们为什么某些属性是可枚举的，而有些属性不是的。</p><p id="3"></p><h2 id="_3️⃣-可枚举性的使用场景" tabindex="-1">3️⃣ 可枚举性的使用场景 <a class="header-anchor" href="#_3️⃣-可枚举性的使用场景" aria-label="Permalink to &quot;3️⃣ 可枚举性的使用场景&quot;">​</a></h2><p><strong>可枚举性是一个不一致的功能</strong>。它存在使用场景，但是总是存在某种缺陷。下面我们看看它的使用场景和其缺陷。</p><p id="3.1"></p><h3 id="_3-1-使用场景-对-for-in-循环隐藏属性" tabindex="-1">3.1 使用场景：对 for-in 循环隐藏属性 <a class="header-anchor" href="#_3-1-使用场景-对-for-in-循环隐藏属性" aria-label="Permalink to &quot;3.1 使用场景：对 for-in 循环隐藏属性&quot;">​</a></h3><p>📚 <code>for-in</code> 循环会遍历对象自身的或继承的所有可枚举字符串keys。</p><p>因此，特性 <code>enumerable</code> 可用于隐藏不想被遍历的属性。这也是为什么在ECMAScript 1版本中引入了可枚举性这个概念。</p><p>通常，最好避免使用 <code>for-in</code> 🤔。下面2个小节将解释为什么。下面函数帮助我们展示 <code>for-in</code> 是如何运作的：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">listPropertiesViaForIn</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">obj</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">result</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> []</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#F07178;"> (</span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">key</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">in</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">obj</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">result</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">key</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">result</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><blockquote><p>1.对对象使用 for-in 的缺陷⭐</p></blockquote><p><code>for-in</code> 遍历所有属性，<strong>也包括继承的属性</strong>：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight has-highlighted-lines"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> proto </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">enumerableProtoProp</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> obj </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line highlighted"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">__proto__</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> proto</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 继承proto</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">enumerableObjProp</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">listPropertiesViaForIn</span><span style="color:#A6ACCD;">(obj)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// [&#39;enumerableObjProp&#39;, &#39;enumerableProtoProp&#39;]</span></span></code></pre></div><p>对于普通对象， <code>for-in</code> 不会看到继承的方法，比如 <code>Object.prototype.toString()</code>, 因为它们是 <strong>不可枚举的</strong>：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> obj </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"><span style="color:#82AAFF;">listPropertiesViaForIn</span><span style="color:#A6ACCD;">(obj)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// []</span></span></code></pre></div><p>👩🏻‍🏫 在用户定义的类中，所有继承属性都是不可枚举的，因此它们也会被忽略：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight has-highlighted-lines"><code><span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Person</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">constructor</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">first</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">last</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">first</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">first</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">last</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">last</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">getName</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">first</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">last</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#676E95;font-style:italic;">// jane 实例的原型是 Person.prototype</span></span>
<span class="line highlighted"><span style="color:#676E95;font-style:italic;">// 只有 getName 是继承的属性，它是不可枚举的 😅</span></span>
<span class="line highlighted"><span style="color:#676E95;font-style:italic;">// first last 是实例自身的属性，它们是可枚举的</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> jane </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Person</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Jane</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Doe</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#82AAFF;">listPropertiesViaForIn</span><span style="color:#A6ACCD;">(jane)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// [&#39;first&#39;, &#39;last&#39;]</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>💡总结：在对象中，<code>for-in</code> 会考虑继承的属性，但我们一般希望忽略继承的属性。因此最好使用 <code>for-of</code> 循环 + <code>Object.keys() | Object.entries()</code> 等结合起来使用😎。</p></div><blockquote><p>2.对数组使用for-in的缺陷</p></blockquote><p>数组和字符串自身属性 <code>.length</code> 是不可枚举的，因此会在 <code>for-in</code> 中被忽略：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight has-highlighted-lines"><code><span class="line"><span style="color:#82AAFF;">listPropertiesViaForIn</span><span style="color:#A6ACCD;">([</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">a</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">b</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">])</span></span>
<span class="line highlighted"><span style="color:#676E95;font-style:italic;">// 🚨 译者注： 这里不是使用 for-of</span></span>
<span class="line highlighted"><span style="color:#676E95;font-style:italic;">// 因此打印的是索引值</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// [&#39;0&#39;, &#39;1&#39;]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">listPropertiesViaForIn</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">ab</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// [&#39;0&#39;, &#39;1&#39;]</span></span></code></pre></div><p>但是，使用 <code>for-in</code> 遍历数组索引通常并不安全，因为它会同时考虑哪些不是索引的继承的和自身的属性。</p><p>下面示例展示了，假如数组自身有<em>非索引属性（<code>Non-index property</code>）</em>:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> arr1 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> [</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">a</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">b</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">]</span></span>
<span class="line"><span style="color:#A6ACCD;">assert</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">deepEqual</span><span style="color:#A6ACCD;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">listPropertiesViaForIn</span><span style="color:#A6ACCD;">(arr1)</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  [</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">0</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">1</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">]</span></span>
<span class="line"><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> arr2 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> [</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">a</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">b</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">]</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 定义一个数组非索引属性</span></span>
<span class="line"><span style="color:#A6ACCD;">arr2</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">nonIndexProp </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">yes</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">assert</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">deepEqual</span><span style="color:#A6ACCD;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">listPropertiesViaForIn</span><span style="color:#A6ACCD;">(arr2)</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  [</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">0</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">1</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">nonIndexProp</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">]</span></span>
<span class="line"><span style="color:#A6ACCD;">)</span></span></code></pre></div><p>💡总结：<code>for-in</code> 不应该用于迭代数组索引，因为它同时考虑到了索引属性和非索引属性：</p><ul><li><p>📚如果你对数组的keys感兴趣，可以使用数组方法 <code>.keys()</code>:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">[</span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;">[</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">a</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">b</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">c</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">keys</span><span style="color:#A6ACCD;">()]</span></span>
<span class="line"><span style="color:#A6ACCD;">[</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;">]</span></span></code></pre></div></li><li><p>如果你想迭代数组的元素，请使用 <code>for-of</code> 循环，它还可以对其它可迭代数据结构生效</p></li></ul><p id="3.2"></p><h3 id="_3-2-使用场景-将属性标记为不可拷贝" tabindex="-1">3.2 使用场景：将属性标记为不可拷贝 <a class="header-anchor" href="#_3-2-使用场景-将属性标记为不可拷贝" aria-label="Permalink to &quot;3.2 使用场景：将属性标记为不可拷贝&quot;">​</a></h3><p>通过将属性标记为不可枚举，我们可以将其在某些拷贝操作中进行隐藏。</p><p>在看更现代化拷贝操作前，我们先看看2个历史性的拷贝操作。</p><blockquote><p>A. 历史性拷贝操作1：Prototype的 Object.extend()</p></blockquote><p><a href="https://en.wikipedia.org/wiki/Prototype_JavaScript_Framework" target="_blank" rel="noreferrer">Prototype</a> 是一个很老的JS框架。</p><p>Prototype的 <a href="http://api.prototypejs.org/language/Object/extend/" target="_blank" rel="noreferrer">Object.extend(destination, source)</a> 会拷贝所有自身和继承的可枚举属性，它的 <a href="https://github.com/prototypejs/prototype/blob/5fddd3e/src/prototype/lang/object.js#L88" target="_blank" rel="noreferrer">实现</a> 如下：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">extend</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">destination</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">source</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#F07178;"> (</span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">property</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">in</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">source</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">destination</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">property</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">source</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">property</span><span style="color:#F07178;">]</span></span>
<span class="line"><span style="color:#F07178;">  </span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">destination</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>如果我们对对象使用 <code>Object.extend()</code>，我们可以看到它会拷贝继承属性到自身上，并且忽略非枚举属性（它同样会忽略symbol keys 属性）。这其实是 <code>for-in</code> 的原因：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> proto </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">defineProperties</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{},</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">enumProtoProp</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">value</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">enumerable</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">nonEnumProtoProp</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">value</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">enumerable</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">false</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> obj </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">create</span><span style="color:#A6ACCD;">(proto</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">enumObjProp</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">value</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">enumerable</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">nonEnumObjProp</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">value</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">4</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">enumerable</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">false</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">extend</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{},</span><span style="color:#A6ACCD;"> obj)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// { enumObjProp: 3, enumProtoProp: 1 }</span></span></code></pre></div><blockquote><p>B. 历史性拷贝操作2：jQuery的 $.extend()</p></blockquote><p>jQuery 的 <a href="https://api.jquery.com/jquery.extend/" target="_blank" rel="noreferrer">$.extend(target, source1, source2, ...)</a> 和 <code>Object.extend()</code> 类似：</p><ul><li>它会拷贝所有自身的和继承的可枚举属性</li><li>先将 <code>source1</code> 拷贝到 <code>target</code>，然后将 <code>source2</code> 拷贝到 <code>target</code>，依次类推</li></ul><blockquote><p>C. ⭐ 可枚举性驱动拷贝的缺点</p></blockquote><p>基于可枚举性拷贝的方式有几个缺点：</p><ul><li>可枚举性用于隐藏继承的属性，这是它主要的使用方式，因为我们通常希望拷贝自身属性到自身属性</li><li>哪些属性被拷贝通常取决于具体的任务；对所有用例使用一个标志很少有意义。更好的选择是提供一个 <code>predicate</code> 函数 (返回布尔值的回调)的复制操作，该 <code>predicate</code> 告诉复制操作何时忽略属性</li><li>当拷贝数组时，可枚举性对隐藏自身属性 <code>.length</code> 很方便。但是存在一种很少见的例外情况：一个同时影响相连属性和被相连属性影响的魔术属性。如果我们自己去实现这样一个魔术属性，我们将使用（继承的）<code>getters |&amp; setters</code>，而不是（自身的） 数据属性</li></ul><blockquote><p>D. ⭐ Object.assign()</p></blockquote><p>在ES6中，<a href="https://exploringjs.com/impatient-js/ch_single-objects.html#object.assign" target="_blank" rel="noreferrer">Object.assign(target, source_1, source_2, ...)</a> 可用于将多个sources合并到target中。<strong>sources上所有自身可枚举属性（字符串属性或者symbol keys属性）都会被考虑 📚</strong>。 <code>Object.assign()</code> 使用 <strong><code>get</code> 操作</strong> 从source读取值，然后使用 <strong><code>set</code> 操作</strong>将值写入到target上。</p><p>关于可枚举性，<code>Object.assign()</code> 延续了 Object.extend() 和 $.extend() 的传统：</p><p>Object.assign 将为所有已流通的 extend() API 铺平道路。我们认为在这些情况下不复制可枚举方法的先例足以让 Object.assign 有这种行为。</p><p>💡 换句话说： <code>Object.assign()</code> 是从 <code>$.extend()</code> 的升级版本。<strong>它的方式比$.extend更清晰，因为它忽略了继承的属性 🤩</strong>。</p><blockquote><p>E. 非枚举有用的一个罕见场景：在拷贝时有用的</p></blockquote><p>非枚举有用的一种比较少见的场景。<a href="https://github.com/jprichardson/node-fs-extra/issues/577" target="_blank" rel="noreferrer">fs-extra</a> 的一个issue:</p><ul><li><p>Node.js内置模块 <code>fs</code> 有一个属性 <code>promises</code>，它包含基于Promise版本 <code>fs</code> API的对象。在那个issue存在的时候，读取 <code>.promise</code> 会导致下面控制台警告：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">ExperimentalWarning:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">The</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">fs.promises</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">API</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">is</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">experimental</span></span></code></pre></div></li><li><p>除了提供自己的功能， <code>fs-extra</code> 也重新导出了fs导出的一切。对CommonJS模块，这意味着将fs所有属性都拷贝到 <code>fs-extra</code> 的 <code>module.exports</code> 对象上（通过 <a href="https://github.com/jprichardson/node-fs-extra/blob/master/lib/index.js" target="_blank" rel="noreferrer">Object.assign</a> 方法）。当 fs-extra这样做后，就会触发警告。每次加载fs-extra都会触发这个警告，令人感到困惑</p></li><li><p>一个 <a href="https://github.com/nodejs/node/pull/20504" target="_blank" rel="noreferrer">快速修复</a> 将 <code>fs.promises</code> 变为不可枚举。之后需，<code>fs-extra</code> 将忽略它</p></li></ul><p id="3.3"></p><h3 id="_3-3-将属性标记为私有" tabindex="-1">3.3 将属性标记为私有 <a class="header-anchor" href="#_3-3-将属性标记为私有" aria-label="Permalink to &quot;3.3 将属性标记为私有&quot;">​</a></h3><p>如果你将一个属性标记为不可枚举，则它不会被 <code>Object.keys</code> &amp; <code>for-in</code> 等等操作看见。对于这些机制，该属性是私有的。</p><p>然而，这种方式存在几个问题😅：</p><ul><li>当拷贝对象时，我们通常也想将私有属性进行拷贝。这和非枚举属性冲突</li><li><strong>属性并不是真正的私有</strong>。获取，设置和其它对属性的操作，对于可枚举属性和不可枚举属性是没有区别的。</li><li>当处理代码时，我们不能立即知道一个属性是否是可枚举的。<strong>命名规范（比如下划线）可以帮助我们辨别它们</strong></li><li>我们不能用可枚举性来辨别公有方法或私有方法，因为方法在原型上默认就是不可枚举的🤣</li></ul><p id="3.4"></p><h3 id="_3-4-json-stringify-隐藏自己的属性" tabindex="-1">3.4 JSON.stringify()隐藏自己的属性 <a class="header-anchor" href="#_3-4-json-stringify-隐藏自己的属性" aria-label="Permalink to &quot;3.4 JSON.stringify()隐藏自己的属性&quot;">​</a></h3><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>📚 <strong><code>JSON.stringify()</code> 返回结果不会包含不可枚举属性。</strong></p></div><p>因此我们可以用枚举性来决定哪些属性可以导出为JSON。这种使用场景和先前将属性标记为私有类似。但它也是不同的，因为它更多地是关于导出的，并且应用了略微不同的考虑因素。例如:一个对象可以完全从JSON重建吗？</p><p>作为枚举性的另一种替代，<strong>对象可以实现 <code>.toJSON()</code> 和 <code>JSON.stringify()</code> 字符串化任何想返回的内容，而不必是对象本身</strong>💡</p><p>🌰：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight has-highlighted-lines"><code><span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Point</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line highlighted"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">fromJSON</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">json</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line highlighted"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">new</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">Point</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">json</span><span style="color:#F07178;">[</span><span style="color:#F78C6C;">0</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">json</span><span style="color:#F07178;">[</span><span style="color:#F78C6C;">1</span><span style="color:#F07178;">])</span></span>
<span class="line highlighted"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">constructor</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">x</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">y</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">x</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">x</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">y</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">y</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span></span>
<span class="line highlighted"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">toJSON</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line highlighted"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> [</span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">x</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">y</span><span style="color:#F07178;">]</span></span>
<span class="line highlighted"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">JSON</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">stringify</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Point</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">8</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;">))</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// &#39;[8,-3]&#39;</span></span></code></pre></div><p>我发现 <code>toJSON()</code> 要比利用枚举性更加的清晰。并且对返回格式更加的自由😎。</p><p id="4"></p><h2 id="_4️⃣-总结" tabindex="-1">4️⃣ 总结 <a class="header-anchor" href="#_4️⃣-总结" aria-label="Permalink to &quot;4️⃣ 总结&quot;">​</a></h2><p>我们已经看到，几乎所有利用不可枚举的应用程序都是变通的方法，现在有了其他更好的解决方案。</p><p>👩🏻‍🏫 对于我们自己的代码，我们通常会假装枚举性不存在：</p><ul><li>使用对象字面量和赋值创建属性总是创建的可枚举属性</li><li>通过类创建的原型属性（比如方法）总是不可枚举的</li></ul><p>2022年07月21日23:47:11</p>`,96),r=[e,t,c];function y(D,F,i,C,A,d){return p(),l("div",null,r)}const b=a(o,[["render",y]]);export{g as __pageData,b as default};
